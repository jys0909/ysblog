[{"title":"lodash 常用函数","date":"2017-05-11T17:09:49.000Z","path":"2017/05/11/loadsh/","text":"_.filter 遍历 collection（集合）元素，返回 predicate（断言函数）返回真值 的所有元素的数组。 predicate（断言函数）调用三个参数：(value, index|key, collection)。返回一个新的过滤后的数组。 12345678910111213141516171819var users = [ &#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36, &apos;active&apos;: true &#125;, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40, &apos;active&apos;: false &#125;]; _.filter(users, function(o) &#123; return !o.active; &#125;);// =&gt; objects for [&apos;fred&apos;] // The `_.matches` iteratee shorthand._.filter(users, &#123; &apos;age&apos;: 36, &apos;active&apos;: true &#125;);// =&gt; objects for [&apos;barney&apos;] // The `_.matchesProperty` iteratee shorthand._.filter(users, [&apos;active&apos;, false]);// =&gt; objects for [&apos;fred&apos;] // The `_.property` iteratee shorthand._.filter(users, &apos;active&apos;);// =&gt; objects for [&apos;barney&apos;] _.find 遍历 collection（集合）元素，返回 predicate（断言函数）第一个返回真值的第一个元素。predicate（断言函数）调用3个参数： (value, index|key, collection)。返回匹配元素，否则返回 undefined。 1234567891011121314151617181920var users = [ &#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36, &apos;active&apos;: true &#125;, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40, &apos;active&apos;: false &#125;, &#123; &apos;user&apos;: &apos;pebbles&apos;, &apos;age&apos;: 1, &apos;active&apos;: true &#125;]; _.find(users, function(o) &#123; return o.age &lt; 40; &#125;);// =&gt; object for &apos;barney&apos; // The `_.matches` iteratee shorthand._.find(users, &#123; &apos;age&apos;: 1, &apos;active&apos;: true &#125;);// =&gt; object for &apos;pebbles&apos; // The `_.matchesProperty` iteratee shorthand._.find(users, [&apos;active&apos;, false]);// =&gt; object for &apos;fred&apos; // The `_.property` iteratee shorthand._.find(users, &apos;active&apos;);// =&gt; object for &apos;barney&apos; _.forEach 调用 iteratee 遍历 collection(集合) 中的每个元素， iteratee 调用3个参数： (value, index|key, collection)。 如果迭代函数（iteratee）显式的返回 false ，迭代会提前退出。返回集合 collection。 123456789_([1, 2]).forEach(function(value) &#123; console.log(value);&#125;);// =&gt; Logs `1` then `2`. _.forEach(&#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;, function(value, key) &#123; console.log(key);&#125;);// =&gt; Logs &apos;a&apos; then &apos;b&apos; (iteration order is not guaranteed). _.map 创建一个数组， value（值） 是 iteratee（迭代函数）遍历 collection（集合）中的每个元素后返回的结果。 iteratee（迭代函数）调用3个参数：(value, index|key, collection). lodash 中有许多方法是防止作为其他方法的迭代函数（愚人码头注：即不能作为iteratee参数传递给其他方法），例如： .every, .filter, .map, .mapValues, .reject, 和 .some。 受保护的方法有（愚人码头注：即这些方法不能使用.every, .filter, .map, .mapValues, .reject, 和 .some作为 iteratee 迭代函数参数） ：ary, chunk, curry, curryRight, drop, dropRight, every, fill, invert, parseInt, random, range, rangeRight, repeat, sampleSize, slice, some, sortBy, split, take, takeRight, template, trim, trimEnd, trimStart, and words返回新的映射后数组。 123456789101112131415161718function square(n) &#123; return n * n;&#125; _.map([4, 8], square);// =&gt; [16, 64] _.map(&#123; &apos;a&apos;: 4, &apos;b&apos;: 8 &#125;, square);// =&gt; [16, 64](iteration order is not guaranteed) var users = [ &#123; &apos;user&apos;: &apos;barney&apos; &#125;, &#123; &apos;user&apos;: &apos;fred&apos; &#125;]; // The `_.property` iteratee shorthand._.map(users, &apos;user&apos;);// =&gt; [&apos;barney&apos;, &apos;fred&apos;] _.orderBy 此方法类似于_.sortBy，除了它允许指定 iteratee（迭代函数）结果如何排序。 如果没指定 orders（排序），所有值以升序排序。 否则，指定为”desc” 降序，或者指定为 “asc” 升序，排序对应值。返回排序后的新数组。 12345678910var users = [ &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 48 &#125;, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 34 &#125;, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;, &#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 &#125;]; // 以 `user` 升序排序 再 `age` 以降序排序。_.orderBy(users, [&apos;user&apos;, &apos;age&apos;], [&apos;asc&apos;, &apos;desc&apos;]);// =&gt; objects for [[&apos;barney&apos;, 36], [&apos;barney&apos;, 34], [&apos;fred&apos;, 48], [&apos;fred&apos;, 40]] _.clone 创建一个 value 的浅拷贝。 注意: 这个方法参考自 structured clone algorithm 以及支持 arrays、array buffers、 booleans、 date objects、maps、 numbers， Object 对象, regexes, sets, strings, symbols, 以及 typed arrays。 arguments对象的可枚举属性会拷贝为普通对象。 一些不可拷贝的对象，例如error objects、functions, DOM nodes, 以及 WeakMaps 会返回空对象。返回拷贝后的值 12345 var objects = [&#123; &apos;a&apos;: 1 &#125;, &#123; &apos;b&apos;: 2 &#125;]; var shallow = _.clone(objects);console.log(shallow[0] === objects[0]);// =&gt; true 续更新… 来源： http://www.css88.com/doc/lodash/#_forinobject-iteratee_identity","tags":[{"name":"个人整理","slug":"个人整理","permalink":"http://www.g5kk.com/tags/个人整理/"}]},{"title":"windows Node 版本管理","date":"2017-05-11T14:56:00.000Z","path":"2017/05/11/node-version-manager/","text":"1、下载 nvm-windows 是 Windows 下的 Node.js 版本管理工具 下载 nvm-window包, 选择最新版本nvm-setup包, 然后进行安装 安装成功后查看下环境变量是否正常$ nvm version 可查看版本 2、使用方法1234nvm install v6.10.3 // 安装node 版本nvm uninstall v6.10.3 // 卸载node 版本nvm use v6.10.3 // 使用node版本nvm help // 查看帮助","tags":[{"name":"node","slug":"node","permalink":"http://www.g5kk.com/tags/node/"}]},{"title":"ReactNative 打开手机WiFi设置","date":"2017-05-11T14:03:16.000Z","path":"2017/05/11/openAndroidSetting/","text":"安装包1npm install react-native-android-settings-library --save 配置 打开 android/settings.gradle 添加如下代码 12include &apos;:react-native-android-settings-library&apos;project(&apos;:react-native-android-settings-library&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/react-native-android-settings-library/android&apos;) 打开 android/app/build.gradle 添加如下代码 1234dependencies &#123; // add here compile project(&apos;:react-native-android-settings-library&apos;)&#125; 打开 MainApplication.java 添加如下代码; 1234import com.reactlibrary.androidsettings.RNANAndroidSettingsLibraryPackage;// 主体new RNANAndroidSettingsLibraryPackage() 引入包123import RNANAndroidSettingsLibrary from &apos;react-native-android-settings-library&apos;;RNANAndroidSettingsLibrary.open(&apos;ACTION_WIFI_SETTINGS&apos;); open参数如下： ACTION_SETTINGS ACTION_WIRELESS_SETTINGS ACTION_AIRPLANE_MODE_SETTINGS ACTION_WIFI_SETTINGS // 打开wifi 开关 ACTION_APN_SETTINGS ACTION_BLUETOOTH_SETTINGS ACTION_DATE_SETTINGS ACTION_LOCALE_SETTINGS ACTION_INPUT_METHOD_SETTINGS ACTION_DISPLAY_SETTINGS ACTION_SECURITY_SETTINGS ACTION_LOCATION_SOURCE_SETTINGS ACTION_INTERNAL_STORAGE_SETTINGS ACTION_MEMORY_CARD_SETTINGS ACTION_APPLICATION_DETAILS_SETTINGS","tags":[{"name":"reactNative","slug":"reactNative","permalink":"http://www.g5kk.com/tags/reactNative/"}]},{"title":"关闭win10自动更新","date":"2017-05-11T11:38:33.000Z","path":"2017/05/11/win10Update/","text":"windows+R 进入 cmd -&gt; gpedit.msc找到window更新，如下图:","tags":[{"name":"个人整理","slug":"个人整理","permalink":"http://www.g5kk.com/tags/个人整理/"}]},{"title":"搭建开发环境","date":"2017-05-10T16:56:29.000Z","path":"2017/05/10/reactNativeSetup/","text":"1、安装ChocolateyChocolatey是一个Windows上的包管理器，类似于linux上的yum和 apt-get。 你可以在其官方网站上查看具体的使用说明。一般的安装步骤应该是下面这样1@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((new-object net.webclient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin 2、安装Python 2安装了Chocolatey后就可以使用下面的命令了1choco install python2 注意目前不支持Python 3版本。 3、NodeNode环境是必须的，使用稳定版本，不要使用cnpm加速，可用如下加速镜像12npm config set registry https://registry.npm.taobao.org --globalnpm config set disturl https://npm.taobao.org/dist --global 4、Yarn、React Native的命令行工具（react-native-cli）Yarn是Facebook提供的替代npm的工具，可以加速node模块的下载。React Native的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。1npm install -g yarn react-native-cli 安装完yarn后同理也要设置镜像源：12yarn config set registry https://registry.npm.taobao.org --globalyarn config set disturl https://npm.taobao.org/dist --global 5、Android Studio 它不是必须的，主要是为了使用里面的SDK, 版本2.0以上Android Studio需要Java Development Kit [JDK]1.8或更高版本。你可以在命令行中输入 javac-version来查看你当前安装的JDK版本。如果版本不合要求，则可以到 官网上下载。 6、ANDROID_HOME环境变量确保ANDROID_HOME环境变量正确地指向了你安装的Android SDK的路径。 打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建 7、配置Android Studio 参数打开SDK Manager ， 配置如下几个参数 8、安装模拟器 Genymotion比起Android Studio自带的原装模拟器，Genymotion是一个性能更好的选择，但它只对个人用户免费。 下载和安装Genymotion（genymotion需要依赖VirtualBox虚拟机，下载选项中提供了包含VirtualBox和不包含的选项，请按需选择）。 打开Genymotion。如果你还没有安装VirtualBox，则此时会提示你安装。 创建一个新模拟器并启动。 启动React Native应用后，可以按下F1来打开开发者菜单。 选择合适的下载安装 9、测试安装程序先打开模拟器， 当然使用真机也是可以的。真机的话需要打开USB调试模式123react-native init HelloWordcd HelloWordreact-native run-android 使用adb devices 查看当前设备","tags":[{"name":"reactNative","slug":"reactNative","permalink":"http://www.g5kk.com/tags/reactNative/"}]},{"title":"reactNative 打包测试","date":"2017-05-10T16:45:18.000Z","path":"2017/05/10/reactnative/","text":"1、生成密钥在项目根目录打开命令行（快捷方法：进入根目录win下按住shift键单击右键打开命令行，直接对应该目录）。然后输入1keytool -genkey -v -keystore my-release-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000 按要求填写相关信息后生成的 ==my-release-key.keystore== 文件放到你工程中的==android/app==文件夹下 2、修改gradle.properties文件在android目录下打开gradle.properties文件，添加如下代码：1234MYAPP_RELEASE_STORE_FILE=my-release-key.keystoreMYAPP_RELEASE_KEY_ALIAS=my-key-aliasMYAPP_RELEASE_STORE_PASSWORD=******* // 密钥口令MYAPP_RELEASE_KEY_PASSWORD=******* // 密钥口令 3、修改build.gradle文件在android/app目录下打开build.gradle文件，按如下格式修改:12345678910111213141516signingConfigs &#123; release &#123; storeFile file(MYAPP_RELEASE_STORE_FILE) storePassword MYAPP_RELEASE_STORE_PASSWORD keyAlias MYAPP_RELEASE_KEY_ALIAS keyPassword MYAPP_RELEASE_KEY_PASSWORD &#125;&#125;buildTypes &#123; release &#123; minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFile(&quot;proguard-android.txt&quot;), &quot;proguard-rules.pro&quot; signingConfig signingConfigs.release &#125;&#125; 4、生成index.android.bundle文件在android\\app\\src\\main目录下新建名为assets的文件夹，然后在项目根目录的命令行下输入1react-native bundle --platform android --dev false --entry-file index.android.js \\ --bundle-output android/app/src/main/assets/index.android.bundle \\ --assets-dest android/app/src/main/res/ 5、生成APK在android目录命令行下输入==gradlew assembleRelease==，然后等待几分钟，在==android/app/build/outputs/apk==目录下找到APK文件。 注意事项: 打包前最好删除app\\build文件夹 src\\main 下面的资源不能出现相同名称 其他可能出现的问题记录在此 1、==unable to process incoming event ‘ProcessComplete’==在/android/目录中执行==gradle assembleRelease==命令 如果出现此类错误，清理下，在==proguard-rules.pro==中加入12-keep class android.text &#123;* ;&#125;-dontwarn android.text.*","tags":[{"name":"reactNative","slug":"reactNative","permalink":"http://www.g5kk.com/tags/reactNative/"}]},{"title":"Markdown 语法的简要规则","date":"2017-05-10T16:37:35.000Z","path":"2017/05/10/markdown/","text":"标题标题是每篇文章都需要也是最常用的格式，在 Markdown 中，如果一段文字被定义为标题，只要在这段文字前加 # 号即可。123# 一级标题## 二级标题### 三级标题 以此类推 共6级 列表熟悉 HTML 的同学肯定知道有序列表与无序列表的区别，在 Markdown 下，列表的显示只需要在文字前加上 - 或 * 即可变为无序列表，有序列表则直接在文字前加1. 2. 3. 符号要和文字之间加上一个字符的空格。 a b A B C 引用如果你需要引用一小段别处的句子，那么就要用引用的格式。只需要在文本前加入 &gt; 这种尖括号（大于号）即可 引用 图片与链接12345插入链接与插入图片的语法很像，区别在一个 !号图片为：![]()链接为：[]()插入图片的地址需要图床，这里推荐围脖图床修复计划 与CloudApp 的服务，生成URL地址即可。 Baidu Baidu 粗体与斜体Markdown 的粗体和斜体也非常简单，用两个 包含一段文本就是粗体的语法，用一个 包含一段文本就是斜体的语法。例如：这里是粗体 这里是斜体 表格表格是 Markdown 比较累人的地方，例子如下：| Tables | Are | Cool || ————- |:————-:| —–:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 代码框如果你是个程序猿，需要在文章里优雅的引用代码框，在 Markdown下实现也非常简单，只需要用三个 ` 把中间的代码包裹起来。图例： 1234var a = 10;var obj = &#123;&#125; 分割线分割线的语法只需要三个 * 号 到这里，Markdown 的基本语法在日常的使用中基本就没什么大问题了，只要多加练习，配合好用的工具，写起东西来肯定会行云流水。更多的语法规则，其实 Mou 的 Help 文档栗子很好，当你第一次使用 Mou 时，就会显示该文档。可以用来对用的查找和学习。 Mark文字使用两个=号包起来, 例如: 下面的文字是==重点== 选择树结构 [ ] 节点1 [x] 节点1-1 [ ] 节点2 [x] 节点2-1 数学公式1E = mc^2 其他12graph LRA--&gt;B 123sequenceDiagramA-&gt;&gt;B: How are you?B-&gt;&gt;A: Great! 12345678ganttdateFormat YYYY-MM-DDsection S1T1: 2014-01-01, 9dsection S2T2: 2014-01-11, 9dsection S3T3: 2014-01-02, 9d 参考 有道云Markdown语法","tags":[{"name":"个人整理","slug":"个人整理","permalink":"http://www.g5kk.com/tags/个人整理/"}]},{"title":"利用Travis CI 让你的github项目持续构建","date":"2017-05-10T15:43:25.000Z","path":"2017/05/10/travis-ci/","text":"Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建 搭建 Travis CI build，需要 github账号和github项目 用github账号登陆Travis CI. 在右上角你的账户名点击进入 ==account==，在==Repositories tab==页点击==Sync now==同步你的github项目 选中项目将默认的off改变为on开启项目的持续集成 在你项目的根目录建立一个.travis.yml文件，内容为1234language: node_js node_js: - stable - 10.3 在打开你的node.js的package.json文件，确保加入script/test节点： 123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;XXXX&quot; &#125; 这里你可以选择mak或者jasmine-node等node.js测试框架的测试命令。并且可以把依赖加入package的depends 在你项目中运行npm test，确保正常工作 ==check in==你的code到github,打开==tracivs ci==界面等待其同步并运行你的build构建。 如果你需要将你的build构建状态放在一个显眼的位置或者项目readme，你可以在首页My Repositories中找到项目并设置中复制状态图片code，形如：[{% image https://travis-ci.org/greengerong/qing 'Build Status](https://travis-ci.org/greengerong/qing.png?branch=master)' '' %} Travs CI 支持多中语言如ruby，java的maven，gradle,Go等请参见文档Travis Docs. 在上面提到的travis.yml文件中我们还可以加入build前后执行脚本，形如： before_script: - before_command_1 - before_command_2 after_script: - after_command_1 - after_command_2 将你的开源项目加入Travis CI队列吧，很容易让你的项目加入持续集成，持续构建队列。 来源： http://www.cnblogs.com/whitewolf/archive/2013/04/14/3019838.html","tags":[{"name":"个人整理","slug":"个人整理","permalink":"http://www.g5kk.com/tags/个人整理/"}]},{"title":"常用正则收录","date":"2017-05-10T14:21:09.000Z","path":"2017/05/10/regex/","text":"1、两位小数以内的正实数1^(([0-9]+)|([0-9]+\\.[0-9]&#123;1,2&#125;))$ 2、中文、字母、数字、或者下划线1/^[\\u4e00-\\u9fa5A-Za-z0-9_]+$/ 3、电话号码1/^(0[0-9]&#123;2,3&#125;\\-)?([2-9][0-9]&#123;6,7&#125;)+(\\-[0-9]&#123;1,4&#125;)?$|(^(13[0-9]|15[0|3|6|7|8|9]|18[8|9])\\d&#123;8&#125;$|(^400-([0-9])&#123;1&#125;([0-9-]&#123;6&#125;)([0-9])&#123;1&#125;)$)/ 4、网址1/^(f|ht)&#123;1&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?/ 5、邮箱1\\w[-\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\.)+[A-Za-z]&#123;2,14&#125; 6、双字节字符1[^\\x00-\\xff] 7、时分秒1([01]?\\d|2[0-3]):[0-5]?\\d:[0-5]?\\d","tags":[{"name":"个人整理","slug":"个人整理","permalink":"http://www.g5kk.com/tags/个人整理/"}]}]